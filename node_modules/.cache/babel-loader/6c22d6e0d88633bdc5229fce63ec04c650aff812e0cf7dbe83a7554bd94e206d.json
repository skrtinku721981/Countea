{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matchedData = matchedData;\nconst _ = require(\"lodash\");\nconst base_1 = require(\"./base\");\n/**\n * Extracts data validated or sanitized from the request, and builds an object with them.\n *\n * @param req the express request object\n * @param options\n * @returns an object of data that's been validated or sanitized in the passed request\n */\nfunction matchedData(req, options = {}) {\n  const internalReq = req;\n  const fieldExtractor = createFieldExtractor(options.includeOptionals !== true);\n  const validityFilter = createValidityFilter(options.onlyValidData);\n  const locationFilter = createLocationFilter(options.locations);\n  return _(internalReq[base_1.contextsKey]).flatMap(fieldExtractor).filter(validityFilter).map(field => field.instance).filter(locationFilter).reduce((state, instance) => _.set(state, instance.path, instance.value), {});\n}\nfunction createFieldExtractor(removeOptionals) {\n  return context => {\n    const instances = context.getData({\n      requiredOnly: removeOptionals\n    });\n    return instances.map(instance => ({\n      instance,\n      context\n    }));\n  };\n}\nfunction createValidityFilter(onlyValidData = true) {\n  return !onlyValidData ? () => true : field => {\n    const hasError = field.context.errors.some(error => error.type === 'field' && error.location === field.instance.location && error.path === field.instance.path);\n    return !hasError;\n  };\n}\nfunction createLocationFilter(locations = []) {\n  // No locations mean all locations\n  const allLocations = locations.length === 0;\n  return allLocations ? () => true : field => locations.includes(field.location);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","matchedData","_","require","base_1","req","options","internalReq","fieldExtractor","createFieldExtractor","includeOptionals","validityFilter","createValidityFilter","onlyValidData","locationFilter","createLocationFilter","locations","contextsKey","flatMap","filter","map","field","instance","reduce","state","set","path","removeOptionals","context","instances","getData","requiredOnly","hasError","errors","some","error","type","location","allLocations","length","includes"],"sources":["D:/test/textutils/node_modules/express-validator/lib/matched-data.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.matchedData = matchedData;\nconst _ = require(\"lodash\");\nconst base_1 = require(\"./base\");\n/**\n * Extracts data validated or sanitized from the request, and builds an object with them.\n *\n * @param req the express request object\n * @param options\n * @returns an object of data that's been validated or sanitized in the passed request\n */\nfunction matchedData(req, options = {}) {\n    const internalReq = req;\n    const fieldExtractor = createFieldExtractor(options.includeOptionals !== true);\n    const validityFilter = createValidityFilter(options.onlyValidData);\n    const locationFilter = createLocationFilter(options.locations);\n    return _(internalReq[base_1.contextsKey])\n        .flatMap(fieldExtractor)\n        .filter(validityFilter)\n        .map(field => field.instance)\n        .filter(locationFilter)\n        .reduce((state, instance) => _.set(state, instance.path, instance.value), {});\n}\nfunction createFieldExtractor(removeOptionals) {\n    return (context) => {\n        const instances = context.getData({ requiredOnly: removeOptionals });\n        return instances.map((instance) => ({ instance, context }));\n    };\n}\nfunction createValidityFilter(onlyValidData = true) {\n    return !onlyValidData\n        ? () => true\n        : (field) => {\n            const hasError = field.context.errors.some(error => error.type === 'field' &&\n                error.location === field.instance.location &&\n                error.path === field.instance.path);\n            return !hasError;\n        };\n}\nfunction createLocationFilter(locations = []) {\n    // No locations mean all locations\n    const allLocations = locations.length === 0;\n    return allLocations ? () => true : (field) => locations.includes(field.location);\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGA,WAAW;AACjC,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,WAAWA,CAACI,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACpC,MAAMC,WAAW,GAAGF,GAAG;EACvB,MAAMG,cAAc,GAAGC,oBAAoB,CAACH,OAAO,CAACI,gBAAgB,KAAK,IAAI,CAAC;EAC9E,MAAMC,cAAc,GAAGC,oBAAoB,CAACN,OAAO,CAACO,aAAa,CAAC;EAClE,MAAMC,cAAc,GAAGC,oBAAoB,CAACT,OAAO,CAACU,SAAS,CAAC;EAC9D,OAAOd,CAAC,CAACK,WAAW,CAACH,MAAM,CAACa,WAAW,CAAC,CAAC,CACpCC,OAAO,CAACV,cAAc,CAAC,CACvBW,MAAM,CAACR,cAAc,CAAC,CACtBS,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC,CAC5BH,MAAM,CAACL,cAAc,CAAC,CACtBS,MAAM,CAAC,CAACC,KAAK,EAAEF,QAAQ,KAAKpB,CAAC,CAACuB,GAAG,CAACD,KAAK,EAAEF,QAAQ,CAACI,IAAI,EAAEJ,QAAQ,CAACtB,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;AACrF;AACA,SAASS,oBAAoBA,CAACkB,eAAe,EAAE;EAC3C,OAAQC,OAAO,IAAK;IAChB,MAAMC,SAAS,GAAGD,OAAO,CAACE,OAAO,CAAC;MAAEC,YAAY,EAAEJ;IAAgB,CAAC,CAAC;IACpE,OAAOE,SAAS,CAACT,GAAG,CAAEE,QAAQ,KAAM;MAAEA,QAAQ;MAAEM;IAAQ,CAAC,CAAC,CAAC;EAC/D,CAAC;AACL;AACA,SAAShB,oBAAoBA,CAACC,aAAa,GAAG,IAAI,EAAE;EAChD,OAAO,CAACA,aAAa,GACf,MAAM,IAAI,GACTQ,KAAK,IAAK;IACT,MAAMW,QAAQ,GAAGX,KAAK,CAACO,OAAO,CAACK,MAAM,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,KAAK,OAAO,IACtED,KAAK,CAACE,QAAQ,KAAKhB,KAAK,CAACC,QAAQ,CAACe,QAAQ,IAC1CF,KAAK,CAACT,IAAI,KAAKL,KAAK,CAACC,QAAQ,CAACI,IAAI,CAAC;IACvC,OAAO,CAACM,QAAQ;EACpB,CAAC;AACT;AACA,SAASjB,oBAAoBA,CAACC,SAAS,GAAG,EAAE,EAAE;EAC1C;EACA,MAAMsB,YAAY,GAAGtB,SAAS,CAACuB,MAAM,KAAK,CAAC;EAC3C,OAAOD,YAAY,GAAG,MAAM,IAAI,GAAIjB,KAAK,IAAKL,SAAS,CAACwB,QAAQ,CAACnB,KAAK,CAACgB,QAAQ,CAAC;AACpF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}