{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExpressValidator = void 0;\nconst matched_data_1 = require(\"./matched-data\");\nconst check_1 = require(\"./middlewares/check\");\nconst exact_1 = require(\"./middlewares/exact\");\nconst one_of_1 = require(\"./middlewares/one-of\");\nconst schema_1 = require(\"./middlewares/schema\");\nconst validation_result_1 = require(\"./validation-result\");\n/* eslint-enable no-use-before-define */\nclass ExpressValidator {\n  constructor(validators, sanitizers, options) {\n    this.validators = validators;\n    this.sanitizers = sanitizers;\n    this.options = options;\n    /**\n     * Creates a middleware/validation chain for one or more fields that may be located in\n     * any of the following:\n     *\n     * - `req.body`\n     * - `req.cookies`\n     * - `req.headers`\n     * - `req.params`\n     * - `req.query`\n     *\n     * @param fields  a string or array of field names to validate/sanitize\n     * @param message an error message to use when failed validations don't specify a custom message.\n     *                Defaults to `Invalid Value`.\n     */\n    this.check = this.buildCheckFunction(['body', 'cookies', 'headers', 'params', 'query']);\n    /**\n     * Same as {@link ExpressValidator.check}, but only validates in `req.body`.\n     */\n    this.body = this.buildCheckFunction(['body']);\n    /**\n     * Same as {@link ExpressValidator.check}, but only validates in `req.cookies`.\n     */\n    this.cookie = this.buildCheckFunction(['cookies']);\n    /**\n     * Same as {@link ExpressValidator.check}, but only validates in `req.headers`.\n     */\n    this.header = this.buildCheckFunction(['headers']);\n    /**\n     * Same as {@link ExpressValidator.check}, but only validates in `req.params`.\n     */\n    this.param = this.buildCheckFunction(['params']);\n    /**\n     * Same as {@link ExpressValidator.check}, but only validates in `req.query`.\n     */\n    this.query = this.buildCheckFunction(['query']);\n    /**\n     * Checks whether the request contains exactly only those fields that have been validated.\n     *\n     * This method is here for convenience; it does exactly the same as `checkExact`.\n     *\n     * @see {@link checkExact}\n     */\n    this.checkExact = exact_1.checkExact;\n    /**\n     * Creates an express middleware with validations for multiple fields at once in the form of\n     * a schema object.\n     *\n     * @param schema the schema to validate.\n     * @param defaultLocations which locations to validate in each field. Defaults to every location.\n     */\n    // NOTE: This method references its own type, so the type cast is necessary.\n    this.checkSchema = (0, schema_1.createCheckSchema)((...args) => this.createChain(...args), Object.keys(this.validators || {}), Object.keys(this.sanitizers || {}));\n    /**\n     * Extracts the validation errors of an express request using the default error formatter of this\n     * instance.\n     *\n     * @see {@link validationResult()}\n     * @param req the express request object\n     * @returns a `Result` which will by default use the error formatter passed when\n     *          instantiating `ExpressValidator`.\n     */\n    this.validationResult = req => {\n      const formatter = this.options?.errorFormatter;\n      const result = (0, validation_result_1.validationResult)(req);\n      return formatter ? result.formatWith(formatter) : result;\n    };\n    this.validatorEntries = Object.entries(validators || {});\n    this.sanitizerEntries = Object.entries(sanitizers || {});\n    // Can't use arrow function in the declaration of `buildCheckFunction` due to the following\n    // error which only happens when tests are run without Jest cache (so CI only):\n    //\n    //    'buildCheckFunction' implicitly has type 'any' because it does not have a type annotation\n    //    and is referenced directly or indirectly in its own initializer\n    this.buildCheckFunction = this.buildCheckFunction.bind(this);\n  }\n  createChain(fields = '', locations = [], message) {\n    const middleware = (0, check_1.check)(fields, locations, message);\n    const boundValidators = Object.fromEntries(this.validatorEntries.map(([name, fn]) => [name, () => middleware.custom(fn)]));\n    const boundSanitizers = Object.fromEntries(this.sanitizerEntries.map(([name, fn]) => [name, () => middleware.customSanitizer(fn)]));\n    return Object.assign(middleware, boundValidators, boundSanitizers);\n  }\n  buildCheckFunction(locations) {\n    return (fields, message) => this.createChain(fields, locations, message);\n  }\n  /**\n   * Creates a middleware that will ensure that at least one of the given validation chains\n   * or validation chain groups are valid.\n   *\n   * If none are, a single error of type `alternative` is added to the request,\n   * with the errors of each chain made available under the `nestedErrors` property.\n   *\n   * @param chains an array of validation chains to check if are valid.\n   *               If any of the items of `chains` is an array of validation chains, then all of them\n   *               must be valid together for the request to be considered valid.\n   */\n  oneOf(chains, options) {\n    return (0, one_of_1.oneOf)(chains, options);\n  }\n  /**\n   * Extracts data validated or sanitized from the request, and builds an object with them.\n   *\n   * This method is a shortcut for `matchedData`; it does nothing different than it.\n   *\n   * @see {@link matchedData}\n   */\n  matchedData(req, options) {\n    return (0, matched_data_1.matchedData)(req, options);\n  }\n}\nexports.ExpressValidator = ExpressValidator;","map":{"version":3,"names":["Object","defineProperty","exports","value","ExpressValidator","matched_data_1","require","check_1","exact_1","one_of_1","schema_1","validation_result_1","constructor","validators","sanitizers","options","check","buildCheckFunction","body","cookie","header","param","query","checkExact","checkSchema","createCheckSchema","args","createChain","keys","validationResult","req","formatter","errorFormatter","result","formatWith","validatorEntries","entries","sanitizerEntries","bind","fields","locations","message","middleware","boundValidators","fromEntries","map","name","fn","custom","boundSanitizers","customSanitizer","assign","oneOf","chains","matchedData"],"sources":["D:/test/textutils/node_modules/express-validator/lib/express-validator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExpressValidator = void 0;\nconst matched_data_1 = require(\"./matched-data\");\nconst check_1 = require(\"./middlewares/check\");\nconst exact_1 = require(\"./middlewares/exact\");\nconst one_of_1 = require(\"./middlewares/one-of\");\nconst schema_1 = require(\"./middlewares/schema\");\nconst validation_result_1 = require(\"./validation-result\");\n/* eslint-enable no-use-before-define */\nclass ExpressValidator {\n    constructor(validators, sanitizers, options) {\n        this.validators = validators;\n        this.sanitizers = sanitizers;\n        this.options = options;\n        /**\n         * Creates a middleware/validation chain for one or more fields that may be located in\n         * any of the following:\n         *\n         * - `req.body`\n         * - `req.cookies`\n         * - `req.headers`\n         * - `req.params`\n         * - `req.query`\n         *\n         * @param fields  a string or array of field names to validate/sanitize\n         * @param message an error message to use when failed validations don't specify a custom message.\n         *                Defaults to `Invalid Value`.\n         */\n        this.check = this.buildCheckFunction(['body', 'cookies', 'headers', 'params', 'query']);\n        /**\n         * Same as {@link ExpressValidator.check}, but only validates in `req.body`.\n         */\n        this.body = this.buildCheckFunction(['body']);\n        /**\n         * Same as {@link ExpressValidator.check}, but only validates in `req.cookies`.\n         */\n        this.cookie = this.buildCheckFunction(['cookies']);\n        /**\n         * Same as {@link ExpressValidator.check}, but only validates in `req.headers`.\n         */\n        this.header = this.buildCheckFunction(['headers']);\n        /**\n         * Same as {@link ExpressValidator.check}, but only validates in `req.params`.\n         */\n        this.param = this.buildCheckFunction(['params']);\n        /**\n         * Same as {@link ExpressValidator.check}, but only validates in `req.query`.\n         */\n        this.query = this.buildCheckFunction(['query']);\n        /**\n         * Checks whether the request contains exactly only those fields that have been validated.\n         *\n         * This method is here for convenience; it does exactly the same as `checkExact`.\n         *\n         * @see {@link checkExact}\n         */\n        this.checkExact = exact_1.checkExact;\n        /**\n         * Creates an express middleware with validations for multiple fields at once in the form of\n         * a schema object.\n         *\n         * @param schema the schema to validate.\n         * @param defaultLocations which locations to validate in each field. Defaults to every location.\n         */\n        // NOTE: This method references its own type, so the type cast is necessary.\n        this.checkSchema = (0, schema_1.createCheckSchema)((...args) => this.createChain(...args), Object.keys(this.validators || {}), Object.keys(this.sanitizers || {}));\n        /**\n         * Extracts the validation errors of an express request using the default error formatter of this\n         * instance.\n         *\n         * @see {@link validationResult()}\n         * @param req the express request object\n         * @returns a `Result` which will by default use the error formatter passed when\n         *          instantiating `ExpressValidator`.\n         */\n        this.validationResult = (req) => {\n            const formatter = this.options?.errorFormatter;\n            const result = (0, validation_result_1.validationResult)(req);\n            return formatter ? result.formatWith(formatter) : result;\n        };\n        this.validatorEntries = Object.entries(validators || {});\n        this.sanitizerEntries = Object.entries(sanitizers || {});\n        // Can't use arrow function in the declaration of `buildCheckFunction` due to the following\n        // error which only happens when tests are run without Jest cache (so CI only):\n        //\n        //    'buildCheckFunction' implicitly has type 'any' because it does not have a type annotation\n        //    and is referenced directly or indirectly in its own initializer\n        this.buildCheckFunction = this.buildCheckFunction.bind(this);\n    }\n    createChain(fields = '', locations = [], message) {\n        const middleware = (0, check_1.check)(fields, locations, message);\n        const boundValidators = Object.fromEntries(this.validatorEntries.map(([name, fn]) => [name, () => middleware.custom(fn)]));\n        const boundSanitizers = Object.fromEntries(this.sanitizerEntries.map(([name, fn]) => [name, () => middleware.customSanitizer(fn)]));\n        return Object.assign(middleware, boundValidators, boundSanitizers);\n    }\n    buildCheckFunction(locations) {\n        return (fields, message) => this.createChain(fields, locations, message);\n    }\n    /**\n     * Creates a middleware that will ensure that at least one of the given validation chains\n     * or validation chain groups are valid.\n     *\n     * If none are, a single error of type `alternative` is added to the request,\n     * with the errors of each chain made available under the `nestedErrors` property.\n     *\n     * @param chains an array of validation chains to check if are valid.\n     *               If any of the items of `chains` is an array of validation chains, then all of them\n     *               must be valid together for the request to be considered valid.\n     */\n    oneOf(chains, options) {\n        return (0, one_of_1.oneOf)(chains, options);\n    }\n    /**\n     * Extracts data validated or sanitized from the request, and builds an object with them.\n     *\n     * This method is a shortcut for `matchedData`; it does nothing different than it.\n     *\n     * @see {@link matchedData}\n     */\n    matchedData(req, options) {\n        return (0, matched_data_1.matchedData)(req, options);\n    }\n}\nexports.ExpressValidator = ExpressValidator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}