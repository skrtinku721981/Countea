{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkSchema = void 0;\nexports.createCheckSchema = createCheckSchema;\nconst _ = require(\"lodash\");\nconst chain_1 = require(\"../chain\");\nconst utils_1 = require(\"../utils\");\nconst check_1 = require(\"./check\");\nconst validLocations = ['body', 'cookies', 'headers', 'params', 'query'];\nconst protectedNames = ['errorMessage', 'in', 'optional'];\n/**\n * Factory for a {@link checkSchema()} function which can have extension validators and sanitizers.\n *\n * @see {@link checkSchema()}\n */\nfunction createCheckSchema(createChain, extraValidators = [], extraSanitizers = []) {\n  /** Type guard for an object entry for a standard validator. */\n  function isStandardValidator(entry) {\n    return (\n      // #664 - explicitly exclude properties which should be set per validator\n      !['not', 'withMessage'].includes(entry[0]) && (entry[0] in chain_1.ValidatorsImpl.prototype || extraValidators.includes(entry[0])) && entry[1]\n    );\n  }\n  /** Type guard for an object entry for a standard sanitizer. */\n  function isStandardSanitizer(entry) {\n    return (entry[0] in chain_1.SanitizersImpl.prototype || extraSanitizers.includes(entry[0])) && entry[1];\n  }\n  /** Type guard for an object entry for a custom validator. */\n  function isCustomValidator(entry) {\n    return !isStandardValidator(entry) && !isStandardSanitizer(entry) && typeof entry[1] === 'object' && entry[1] && typeof entry[1].custom === 'function';\n  }\n  /** Type guard for an object entry for a custom sanitizer. */\n  function isCustomSanitizer(entry) {\n    return !isStandardValidator(entry) && !isStandardSanitizer(entry) && typeof entry[1] === 'object' && entry[1] && typeof entry[1].customSanitizer === 'function';\n  }\n  return (schema, defaultLocations = validLocations) => {\n    const chains = Object.keys(schema).map(field => {\n      const config = schema[field];\n      const chain = createChain(field, ensureLocations(config, defaultLocations), config.errorMessage);\n      // optional doesn't matter where it happens in the chain\n      if (config.optional) {\n        chain.optional(config.optional === true ? true : config.optional.options);\n      }\n      for (const entry of Object.entries(config)) {\n        if (protectedNames.includes(entry[0]) || !entry[1]) {\n          continue;\n        }\n        if (!isStandardValidator(entry) && !isStandardSanitizer(entry) && !isCustomValidator(entry) && !isCustomSanitizer(entry)) {\n          console.warn(`express-validator: schema of \"${field}\" has unknown validator/sanitizer \"${entry[0]}\"`);\n          continue;\n        }\n        // For validators, stuff that must come _before_ the validator itself in the chain.\n        if ((isStandardValidator(entry) || isCustomValidator(entry)) && entry[1] !== true) {\n          const [, validatorConfig] = entry;\n          validatorConfig.if && chain.if(validatorConfig.if);\n          validatorConfig.negated && chain.not();\n        }\n        if (isStandardValidator(entry) || isStandardSanitizer(entry)) {\n          const options = entry[1] ? entry[1] === true ? [] : _.castArray(entry[1].options) : [];\n          chain[entry[0]](...options);\n        }\n        if (isCustomValidator(entry)) {\n          chain.custom(entry[1].custom);\n        }\n        if (isCustomSanitizer(entry)) {\n          chain.customSanitizer(entry[1].customSanitizer);\n        }\n        // For validators, stuff that must come _after_ the validator itself in the chain.\n        if ((isStandardValidator(entry) || isCustomValidator(entry)) && entry[1] !== true) {\n          const [, validatorConfig] = entry;\n          validatorConfig.bail && chain.bail(validatorConfig.bail === true ? {} : validatorConfig.bail);\n          validatorConfig.errorMessage && chain.withMessage(validatorConfig.errorMessage);\n        }\n      }\n      return chain;\n    });\n    const run = async req => (0, utils_1.runAllChains)(req, chains);\n    return Object.assign(chains, {\n      run\n    });\n  };\n}\n/**\n * Creates an express middleware with validations for multiple fields at once in the form of\n * a schema object.\n *\n * @param schema the schema to validate.\n * @param defaultLocations\n * @returns\n */\nexports.checkSchema = createCheckSchema(check_1.check);\nfunction ensureLocations(config, defaults) {\n  // .filter(Boolean) is done because in can be undefined -- which is not going away from the type\n  // See https://github.com/Microsoft/TypeScript/pull/29955 for details\n  const locations = Array.isArray(config.in) ? config.in : [config.in].filter(Boolean);\n  const actualLocations = locations.length ? locations : defaults;\n  return actualLocations.filter(location => validLocations.includes(location));\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","checkSchema","createCheckSchema","_","require","chain_1","utils_1","check_1","validLocations","protectedNames","createChain","extraValidators","extraSanitizers","isStandardValidator","entry","includes","ValidatorsImpl","prototype","isStandardSanitizer","SanitizersImpl","isCustomValidator","custom","isCustomSanitizer","customSanitizer","schema","defaultLocations","chains","keys","map","field","config","chain","ensureLocations","errorMessage","optional","options","entries","console","warn","validatorConfig","if","negated","not","castArray","bail","withMessage","run","req","runAllChains","assign","check","defaults","locations","Array","isArray","in","filter","Boolean","actualLocations","length","location"],"sources":["D:/test/textutils/node_modules/express-validator/lib/middlewares/schema.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkSchema = void 0;\nexports.createCheckSchema = createCheckSchema;\nconst _ = require(\"lodash\");\nconst chain_1 = require(\"../chain\");\nconst utils_1 = require(\"../utils\");\nconst check_1 = require(\"./check\");\nconst validLocations = ['body', 'cookies', 'headers', 'params', 'query'];\nconst protectedNames = ['errorMessage', 'in', 'optional'];\n/**\n * Factory for a {@link checkSchema()} function which can have extension validators and sanitizers.\n *\n * @see {@link checkSchema()}\n */\nfunction createCheckSchema(createChain, extraValidators = [], extraSanitizers = []) {\n    /** Type guard for an object entry for a standard validator. */\n    function isStandardValidator(entry) {\n        return (\n        // #664 - explicitly exclude properties which should be set per validator\n        !['not', 'withMessage'].includes(entry[0]) &&\n            (entry[0] in chain_1.ValidatorsImpl.prototype || extraValidators.includes(entry[0])) &&\n            entry[1]);\n    }\n    /** Type guard for an object entry for a standard sanitizer. */\n    function isStandardSanitizer(entry) {\n        return ((entry[0] in chain_1.SanitizersImpl.prototype || extraSanitizers.includes(entry[0])) &&\n            entry[1]);\n    }\n    /** Type guard for an object entry for a custom validator. */\n    function isCustomValidator(entry) {\n        return (!isStandardValidator(entry) &&\n            !isStandardSanitizer(entry) &&\n            typeof entry[1] === 'object' &&\n            entry[1] &&\n            typeof entry[1].custom === 'function');\n    }\n    /** Type guard for an object entry for a custom sanitizer. */\n    function isCustomSanitizer(entry) {\n        return (!isStandardValidator(entry) &&\n            !isStandardSanitizer(entry) &&\n            typeof entry[1] === 'object' &&\n            entry[1] &&\n            typeof entry[1].customSanitizer === 'function');\n    }\n    return (schema, defaultLocations = validLocations) => {\n        const chains = Object.keys(schema).map(field => {\n            const config = schema[field];\n            const chain = createChain(field, ensureLocations(config, defaultLocations), config.errorMessage);\n            // optional doesn't matter where it happens in the chain\n            if (config.optional) {\n                chain.optional(config.optional === true ? true : config.optional.options);\n            }\n            for (const entry of Object.entries(config)) {\n                if (protectedNames.includes(entry[0]) || !entry[1]) {\n                    continue;\n                }\n                if (!isStandardValidator(entry) &&\n                    !isStandardSanitizer(entry) &&\n                    !isCustomValidator(entry) &&\n                    !isCustomSanitizer(entry)) {\n                    console.warn(`express-validator: schema of \"${field}\" has unknown validator/sanitizer \"${entry[0]}\"`);\n                    continue;\n                }\n                // For validators, stuff that must come _before_ the validator itself in the chain.\n                if ((isStandardValidator(entry) || isCustomValidator(entry)) && entry[1] !== true) {\n                    const [, validatorConfig] = entry;\n                    validatorConfig.if && chain.if(validatorConfig.if);\n                    validatorConfig.negated && chain.not();\n                }\n                if (isStandardValidator(entry) || isStandardSanitizer(entry)) {\n                    const options = entry[1] ? (entry[1] === true ? [] : _.castArray(entry[1].options)) : [];\n                    chain[entry[0]](...options);\n                }\n                if (isCustomValidator(entry)) {\n                    chain.custom(entry[1].custom);\n                }\n                if (isCustomSanitizer(entry)) {\n                    chain.customSanitizer(entry[1].customSanitizer);\n                }\n                // For validators, stuff that must come _after_ the validator itself in the chain.\n                if ((isStandardValidator(entry) || isCustomValidator(entry)) && entry[1] !== true) {\n                    const [, validatorConfig] = entry;\n                    validatorConfig.bail &&\n                        chain.bail(validatorConfig.bail === true ? {} : validatorConfig.bail);\n                    validatorConfig.errorMessage && chain.withMessage(validatorConfig.errorMessage);\n                }\n            }\n            return chain;\n        });\n        const run = async (req) => (0, utils_1.runAllChains)(req, chains);\n        return Object.assign(chains, { run });\n    };\n}\n/**\n * Creates an express middleware with validations for multiple fields at once in the form of\n * a schema object.\n *\n * @param schema the schema to validate.\n * @param defaultLocations\n * @returns\n */\nexports.checkSchema = createCheckSchema(check_1.check);\nfunction ensureLocations(config, defaults) {\n    // .filter(Boolean) is done because in can be undefined -- which is not going away from the type\n    // See https://github.com/Microsoft/TypeScript/pull/29955 for details\n    const locations = Array.isArray(config.in)\n        ? config.in\n        : [config.in].filter(Boolean);\n    const actualLocations = locations.length ? locations : defaults;\n    return actualLocations.filter(location => validLocations.includes(location));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}