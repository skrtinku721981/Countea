{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sanitization = void 0;\nconst utils_1 = require(\"../utils\");\nclass Sanitization {\n  constructor(sanitizer, custom, options = [],\n  // For testing only.\n  // Deliberately not calling it `toString` in order to not override `Object.prototype.toString`.\n  stringify = utils_1.toString) {\n    this.sanitizer = sanitizer;\n    this.custom = custom;\n    this.options = options;\n    this.stringify = stringify;\n  }\n  async run(context, value, meta) {\n    const {\n      path,\n      location\n    } = meta;\n    const runCustomSanitizer = async () => {\n      const sanitizerValue = this.sanitizer(value, meta);\n      return Promise.resolve(sanitizerValue);\n    };\n    if (this.custom) {\n      const newValue = await runCustomSanitizer();\n      context.setData(path, newValue, location);\n      return;\n    }\n    const values = Array.isArray(value) ? value : [value];\n    const newValues = values.map(value => {\n      return this.sanitizer(this.stringify(value), ...this.options);\n    });\n    // We get only the first value of the array if the orginal value was wrapped.\n    context.setData(path, values !== value ? newValues[0] : newValues, location);\n  }\n}\nexports.Sanitization = Sanitization;","map":{"version":3,"names":["Object","defineProperty","exports","value","Sanitization","utils_1","require","constructor","sanitizer","custom","options","stringify","toString","run","context","meta","path","location","runCustomSanitizer","sanitizerValue","Promise","resolve","newValue","setData","values","Array","isArray","newValues","map"],"sources":["D:/test/textutils/node_modules/express-validator/lib/context-items/sanitization.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Sanitization = void 0;\nconst utils_1 = require(\"../utils\");\nclass Sanitization {\n    constructor(sanitizer, custom, options = [], \n    // For testing only.\n    // Deliberately not calling it `toString` in order to not override `Object.prototype.toString`.\n    stringify = utils_1.toString) {\n        this.sanitizer = sanitizer;\n        this.custom = custom;\n        this.options = options;\n        this.stringify = stringify;\n    }\n    async run(context, value, meta) {\n        const { path, location } = meta;\n        const runCustomSanitizer = async () => {\n            const sanitizerValue = this.sanitizer(value, meta);\n            return Promise.resolve(sanitizerValue);\n        };\n        if (this.custom) {\n            const newValue = await runCustomSanitizer();\n            context.setData(path, newValue, location);\n            return;\n        }\n        const values = Array.isArray(value) ? value : [value];\n        const newValues = values.map(value => {\n            return this.sanitizer(this.stringify(value), ...this.options);\n        });\n        // We get only the first value of the array if the orginal value was wrapped.\n        context.setData(path, values !== value ? newValues[0] : newValues, location);\n    }\n}\nexports.Sanitization = Sanitization;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnC,MAAMF,YAAY,CAAC;EACfG,WAAWA,CAACC,SAAS,EAAEC,MAAM,EAAEC,OAAO,GAAG,EAAE;EAC3C;EACA;EACAC,SAAS,GAAGN,OAAO,CAACO,QAAQ,EAAE;IAC1B,IAAI,CAACJ,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EACA,MAAME,GAAGA,CAACC,OAAO,EAAEX,KAAK,EAAEY,IAAI,EAAE;IAC5B,MAAM;MAAEC,IAAI;MAAEC;IAAS,CAAC,GAAGF,IAAI;IAC/B,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACnC,MAAMC,cAAc,GAAG,IAAI,CAACX,SAAS,CAACL,KAAK,EAAEY,IAAI,CAAC;MAClD,OAAOK,OAAO,CAACC,OAAO,CAACF,cAAc,CAAC;IAC1C,CAAC;IACD,IAAI,IAAI,CAACV,MAAM,EAAE;MACb,MAAMa,QAAQ,GAAG,MAAMJ,kBAAkB,CAAC,CAAC;MAC3CJ,OAAO,CAACS,OAAO,CAACP,IAAI,EAAEM,QAAQ,EAAEL,QAAQ,CAAC;MACzC;IACJ;IACA,MAAMO,MAAM,GAAGC,KAAK,CAACC,OAAO,CAACvB,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;IACrD,MAAMwB,SAAS,GAAGH,MAAM,CAACI,GAAG,CAACzB,KAAK,IAAI;MAClC,OAAO,IAAI,CAACK,SAAS,CAAC,IAAI,CAACG,SAAS,CAACR,KAAK,CAAC,EAAE,GAAG,IAAI,CAACO,OAAO,CAAC;IACjE,CAAC,CAAC;IACF;IACAI,OAAO,CAACS,OAAO,CAACP,IAAI,EAAEQ,MAAM,KAAKrB,KAAK,GAAGwB,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,EAAEV,QAAQ,CAAC;EAChF;AACJ;AACAf,OAAO,CAACE,YAAY,GAAGA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}