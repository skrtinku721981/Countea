{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Result = exports.validationResult = void 0;\nconst _ = require(\"lodash\");\nconst base_1 = require(\"./base\");\nconst utils_1 = require(\"./utils\");\n/**\n * Extracts the validation errors of an express request\n */\nexports.validationResult = Object.assign(withDefaults(), {\n  withDefaults\n});\n/**\n * The current state of the validation errors in a request.\n */\nclass Result {\n  constructor(formatter, errors) {\n    this.formatter = formatter;\n    this.errors = errors;\n  }\n  /**\n   * Gets the validation errors as an array.\n   *\n   * @param options.onlyFirstError whether only the first error of each\n   */\n  array(options) {\n    return options && options.onlyFirstError ? Object.values(this.mapped()) : this.errors.map(this.formatter);\n  }\n  /**\n   * Gets the validation errors as an object.\n   * If a field has more than one error, only the first one is set in the resulting object.\n   *\n   * @returns an object from field name to error\n   */\n  mapped() {\n    return this.errors.reduce((mapping, error) => {\n      const key = error.type === 'field' ? error.path : `_${error.type}`;\n      if (!mapping[key]) {\n        mapping[key] = this.formatter(error);\n      }\n      return mapping;\n    }, {});\n  }\n  /**\n   * Specifies a function to format errors with.\n   * @param formatter the function to use for formatting errors\n   * @returns A new {@link Result} instance with the given formatter\n   */\n  formatWith(formatter) {\n    return new Result(formatter, this.errors);\n  }\n  /**\n   * @returns `true` if there are no errors, `false` otherwise\n   */\n  isEmpty() {\n    return this.errors.length === 0;\n  }\n  /**\n   * Throws an error if there are validation errors.\n   */\n  throw() {\n    if (!this.isEmpty()) {\n      throw Object.assign(new Error(), (0, utils_1.bindAll)(this));\n    }\n  }\n}\nexports.Result = Result;\n/**\n * Creates a `validationResult`-like function with default options passed to every {@link Result} it\n * returns.\n */\nfunction withDefaults(options = {}) {\n  const defaults = {\n    formatter: error => error\n  };\n  const actualOptions = _.defaults(options, defaults);\n  return req => {\n    const contexts = req[base_1.contextsKey] || [];\n    const errors = _.flatMap(contexts, 'errors');\n    return new Result(actualOptions.formatter, errors);\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Result","validationResult","_","require","base_1","utils_1","assign","withDefaults","constructor","formatter","errors","array","options","onlyFirstError","values","mapped","map","reduce","mapping","error","key","type","path","formatWith","isEmpty","length","throw","Error","bindAll","defaults","actualOptions","req","contexts","contextsKey","flatMap"],"sources":["D:/test/textutils/node_modules/express-validator/lib/validation-result.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Result = exports.validationResult = void 0;\nconst _ = require(\"lodash\");\nconst base_1 = require(\"./base\");\nconst utils_1 = require(\"./utils\");\n/**\n * Extracts the validation errors of an express request\n */\nexports.validationResult = Object.assign(withDefaults(), { withDefaults });\n/**\n * The current state of the validation errors in a request.\n */\nclass Result {\n    constructor(formatter, errors) {\n        this.formatter = formatter;\n        this.errors = errors;\n    }\n    /**\n     * Gets the validation errors as an array.\n     *\n     * @param options.onlyFirstError whether only the first error of each\n     */\n    array(options) {\n        return options && options.onlyFirstError\n            ? Object.values(this.mapped())\n            : this.errors.map(this.formatter);\n    }\n    /**\n     * Gets the validation errors as an object.\n     * If a field has more than one error, only the first one is set in the resulting object.\n     *\n     * @returns an object from field name to error\n     */\n    mapped() {\n        return this.errors.reduce((mapping, error) => {\n            const key = error.type === 'field' ? error.path : `_${error.type}`;\n            if (!mapping[key]) {\n                mapping[key] = this.formatter(error);\n            }\n            return mapping;\n        }, {});\n    }\n    /**\n     * Specifies a function to format errors with.\n     * @param formatter the function to use for formatting errors\n     * @returns A new {@link Result} instance with the given formatter\n     */\n    formatWith(formatter) {\n        return new Result(formatter, this.errors);\n    }\n    /**\n     * @returns `true` if there are no errors, `false` otherwise\n     */\n    isEmpty() {\n        return this.errors.length === 0;\n    }\n    /**\n     * Throws an error if there are validation errors.\n     */\n    throw() {\n        if (!this.isEmpty()) {\n            throw Object.assign(new Error(), (0, utils_1.bindAll)(this));\n        }\n    }\n}\nexports.Result = Result;\n/**\n * Creates a `validationResult`-like function with default options passed to every {@link Result} it\n * returns.\n */\nfunction withDefaults(options = {}) {\n    const defaults = {\n        formatter: error => error,\n    };\n    const actualOptions = _.defaults(options, defaults);\n    return (req) => {\n        const contexts = req[base_1.contextsKey] || [];\n        const errors = _.flatMap(contexts, 'errors');\n        return new Result(actualOptions.formatter, errors);\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}